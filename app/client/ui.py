# ui.py
import requests
import streamlit as st
import re
from typing import List, Dict, Tuple

API_URL = "http://localhost:8000/predict"

# Mapping polarity to icon v√† m√†u n·ªÅn
POLARITY_ICON = {
    'positive': 'üòä',
    'neutral': 'üòê',
    'negative': '‚òπÔ∏è'
}
COLOR_LIST = ['#FFECB3', '#C8E6C9', '#BBDEFB', '#F8BBD0', '#D1C4E9']


def check_api() -> bool:
    """Ki·ªÉm tra healthcheck c·ªßa FastAPI"""
    try:
        r = requests.get(API_URL.replace('/predict','/'))
        return r.status_code == 200
    except requests.RequestException:
        return False


def call_api(review_text: str) -> Tuple[str, List[Dict[str, Tuple[str, Tuple[int,int]]]]]:
    """G·ªçi API v√† tr·∫£ v·ªÅ raw_output c√πng list entries ch·ª©a aspect, polarity v√† position"""
    payload = {"review": review_text}
    resp = requests.post(API_URL, json=payload, timeout=30)
    resp.raise_for_status()
    data = resp.json()
    raw = data.get("raw_output", "")
    entries = []
    for item in data.get('results', []):
        for asp, pol, pos in zip(item['aspects'], item['polarities'], item['positions']):
            entries.append({'aspect': asp, 'polarity': pol, 'position': pos})
    return raw, entries


def render_header():
    """Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† c·∫•u h√¨nh trang"""
    st.set_page_config(page_title="InstructABSA Demo", layout="centered")
    st.title("üìù InstructABSA")
    st.markdown("Nh·∫≠p review d∆∞·ªõi ƒë√¢y, nh·∫•n **Ph√¢n t√≠ch** ƒë·ªÉ highlight c√°c aspect terms v√† hi·ªÉn th·ªã sentiment icon.")


def input_form() -> str:
    """Nh·∫≠n c√¢u review t·ª´ ng∆∞·ªùi d√πng"""
    return st.text_area("Review:", height=150, placeholder="Nh·∫≠p m·ªôt c√¢u ƒë√°nh gi√°...")


def render_output(raw_output: str, entries: List[Dict], review_text: str):
    """Hi·ªÉn th·ªã raw_output v√† c√¢u review v·ªõi highlight + icon sentiment"""
    # K·∫øt qu·∫£ th√¥
    st.subheader("K·∫øt qu·∫£ th√¥:")
    st.code(raw_output)

    # Highlight review
    st.subheader("Review v·ªõi highlights:")
    highlighted = review_text
    # Map m·ªói aspect sang m√†u
    color_map = {}
    for idx, e in enumerate(entries):
        asp = e['aspect']
        if asp not in color_map:
            color_map[asp] = COLOR_LIST[idx % len(COLOR_LIST)]

    # S·∫Øp x·∫øp ƒë·ªÉ tr√°nh ghi ƒë√® l·∫´n nhau
    for e in sorted(entries, key=lambda x: len(x['aspect']), reverse=True):
        asp = e['aspect']
        pol = e['polarity']
        color = color_map[asp]
        icon = POLARITY_ICON.get(pol, '')
        span = (
            f"<span style='background-color:{color}; padding:2px; border-radius:4px;' "
            f"title='{pol} {icon}'>{asp} <sup>{icon}</sup></span>"
        )
        # Replace v·ªõi regex ƒë·ªÉ insensitive v√† ch√≠nh x√°c
        highlighted = re.sub(re.escape(asp), span, highlighted, flags=re.IGNORECASE)

    st.markdown(highlighted, unsafe_allow_html=True)
